var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/react-vt.ts
import {
  useState,
  useReducer,
  useSyncExternalStore,
  startTransition as reactStartTransition,
  useEffect,
  useTransition
} from "react";
var suspendersCount = 0;
var observers = /* @__PURE__ */ new Set();
var didCaptureNewState = null;
function suspendViewTransitionCapture() {
  suspendersCount++;
}
function resumeViewTransitionCapture() {
  !--suspendersCount;
  observers.forEach((observer) => observer());
}
var _a;
var areViewTransitionsSupported = typeof ((_a = globalThis.document) == null ? void 0 : _a.startViewTransition) === "function";
function useBlockRendering(blocked) {
  const [, forceRender] = useReducer((x) => x + 1, 0);
  if (blocked) {
    const deadline = performance.now() + 1;
    while (performance.now() < deadline) {
    }
  }
  useEffect(() => {
    if (blocked)
      forceRender();
  });
}
function AutoViewTransitionsOnClick({ match = "a[href]" }) {
  const [, startTransition] = useTransition();
  const { startViewTransition } = useViewTransition();
  useEffect(() => {
    if (!match || !globalThis.document)
      return;
    function captureClick(event) {
      const target = event.target;
      if (!target.matches(match) || !event.isTrusted)
        return;
      event.preventDefault();
      event.stopPropagation();
      startViewTransition(() => startTransition(() => target.click()));
    }
    globalThis.document.addEventListener("click", captureClick, { capture: true });
    return () => {
      globalThis.document.removeEventListener("click", captureClick);
    };
  }, []);
  return null;
}
function SuspendViewTransition() {
  useEffect(() => {
    suspendViewTransitionCapture();
    return () => resumeViewTransitionCapture();
  }, []);
  return null;
}
function useViewTransition() {
  const [transitionState, setTransitionState] = useState("idle");
  useSyncExternalStore((onStoreChange) => {
    observers.add(onStoreChange);
    return () => {
      observers.delete(onStoreChange);
    };
  }, () => suspendersCount, () => 0);
  useEffect(() => {
    if (didCaptureNewState && !suspendersCount) {
      didCaptureNewState();
      didCaptureNewState = null;
    }
  });
  useBlockRendering(transitionState === "capturing-old");
  function startViewTransition(updateCallback) {
    if (!areViewTransitionsSupported) {
      if (updateCallback)
        reactStartTransition(updateCallback);
      return;
    }
    suspendViewTransitionCapture();
    setTransitionState("capturing-old");
    const transition = document.startViewTransition(() => new Promise((resolve) => __async(this, null, function* () {
      setTransitionState("capturing-new");
      resumeViewTransitionCapture();
      if (updateCallback)
        yield updateCallback();
      didCaptureNewState = resolve;
    })));
    transition.finished.then(() => {
      setTransitionState("idle");
    });
    transition.ready.then(() => {
      setTransitionState("animating");
    }).catch((e) => {
      console.error(e);
      setTransitionState("skipped");
    });
  }
  return {
    transitionState,
    startViewTransition,
    suspendViewTransitionCapture,
    resumeViewTransitionCapture
  };
}
function useAutoViewTransitions({ enabled = true }) {
  const { transitionState, startViewTransition } = useViewTransition();
  const [isPending] = useTransition();
  useEffect(() => {
    if (enabled && transitionState === "idle" && isPending && areViewTransitionsSupported) {
      startViewTransition();
    }
  }, [transitionState, isPending, enabled]);
}
export {
  AutoViewTransitionsOnClick,
  SuspendViewTransition,
  useAutoViewTransitions,
  useViewTransition
};
