"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/next-vt.tsx
var next_vt_exports = {};
__export(next_vt_exports, {
  EnableNextAppRouterViewTransitions: () => EnableNextAppRouterViewTransitions,
  SuspendViewTransition: () => SuspendViewTransition,
  useNextRouterViewTransitions: () => useNextRouterViewTransitions,
  useViewTransition: () => useViewTransition
});
module.exports = __toCommonJS(next_vt_exports);

// src/react-vt.ts
var import_react = require("react");
var suspendersCount = 0;
var observers = /* @__PURE__ */ new Set();
var didCaptureNewState = null;
function suspendViewTransitionCapture() {
  suspendersCount++;
}
function resumeViewTransitionCapture() {
  !--suspendersCount;
  observers.forEach((observer) => observer());
}
var _a;
var areViewTransitionsSupported = typeof ((_a = globalThis.document) == null ? void 0 : _a.startViewTransition) === "function";
function useBlockRendering(blocked) {
  const [, forceRender] = (0, import_react.useReducer)((x) => x + 1, 0);
  if (blocked) {
    const deadline = performance.now() + 1;
    while (performance.now() < deadline) {
    }
  }
  (0, import_react.useEffect)(() => {
    if (blocked)
      forceRender();
  });
}
function SuspendViewTransition() {
  (0, import_react.useEffect)(() => {
    suspendViewTransitionCapture();
    return () => resumeViewTransitionCapture();
  }, []);
  return null;
}
function useViewTransition() {
  const [transitionState, setTransitionState] = (0, import_react.useState)("idle");
  (0, import_react.useSyncExternalStore)((onStoreChange) => {
    observers.add(onStoreChange);
    return () => {
      observers.delete(onStoreChange);
    };
  }, () => suspendersCount, () => 0);
  (0, import_react.useEffect)(() => {
    if (didCaptureNewState && !suspendersCount) {
      didCaptureNewState();
      didCaptureNewState = null;
    }
  });
  useBlockRendering(transitionState === "capturing-old");
  function startViewTransition(updateCallback) {
    if (!areViewTransitionsSupported) {
      if (updateCallback)
        (0, import_react.startTransition)(updateCallback);
      return;
    }
    suspendViewTransitionCapture();
    setTransitionState("capturing-old");
    const transition = document.startViewTransition(() => new Promise((resolve) => __async(this, null, function* () {
      setTransitionState("capturing-new");
      resumeViewTransitionCapture();
      if (updateCallback)
        yield updateCallback();
      didCaptureNewState = resolve;
    })));
    transition.finished.then(() => {
      setTransitionState("idle");
    });
    transition.ready.then(() => {
      setTransitionState("animating");
    }).catch((e) => {
      console.error(e);
      setTransitionState("skipped");
    });
  }
  return {
    transitionState,
    startViewTransition,
    suspendViewTransitionCapture,
    resumeViewTransitionCapture
  };
}

// src/next-vt.tsx
var import_react2 = require("react");
var import_react3 = __toESM(require("react"));
function useNextRouterViewTransitions({ events }) {
  const {
    startViewTransition,
    suspendViewTransitionCapture: suspendViewTransitionCapture2,
    resumeViewTransitionCapture: resumeViewTransitionCapture2
  } = useViewTransition();
  (0, import_react2.useEffect)(() => {
    function beginNavigation() {
      startViewTransition();
      suspendViewTransitionCapture2();
    }
    ;
    function endNavigation() {
      resumeViewTransitionCapture2();
    }
    events.on("routeChangeStart", beginNavigation);
    events.on("routeChangeComplete", endNavigation);
    return () => {
      events.off("routeChangeStart", beginNavigation);
      events.off("routeChangeComplete", endNavigation);
    };
  }, []);
}
function RouterEventsNotifier() {
  return null;
}
var EnableNextAppRouterViewTransitions = () => {
  return /* @__PURE__ */ import_react3.default.createElement(import_react2.Suspense, { fallback: /* @__PURE__ */ import_react3.default.createElement(SuspendViewTransition, null) }, /* @__PURE__ */ import_react3.default.createElement(RouterEventsNotifier, null));
};
